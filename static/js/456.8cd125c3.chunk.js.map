{"version":3,"file":"static/js/456.8cd125c3.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/About/About.module.css?e187","components/About/About.js","../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","../node_modules/react-intersection-observer/src/useInView.tsx","../node_modules/framer-motion/dist/es/animation/hooks/animation-controls.mjs","../node_modules/framer-motion/dist/es/animation/hooks/use-animation.mjs"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"about\":\"About_about__c0p3q\",\"aboutContainer\":\"About_aboutContainer__7pz3r\",\"aboutImage\":\"About_aboutImage__cOXNx\",\"imageOverlay\":\"About_imageOverlay__51jyP\",\"aboutText\":\"About_aboutText__abXYO\",\"myHeading\":\"About_myHeading__sGE58\",\"subheading\":\"About_subheading__Z0pdT\"};","import React from 'react';\r\nimport styles from './About.module.css';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport { motion, useAnimation } from 'framer-motion';\r\n\r\nconst About = () => {\r\n  const controls = useAnimation();\r\n  const [ref, inView] = useInView({ triggerOnce: true, threshold: 0.15 });\r\n\r\n  React.useEffect(() => {\r\n    if (inView) {\r\n      controls.start({ opacity: 1, y: 0, transition: { duration: 0.7, ease: 'easeOut' } });\r\n    }\r\n  }, [controls, inView]);\r\n\r\n  return (\r\n    <motion.section\r\n      id=\"about\"\r\n      className={styles.about}\r\n      ref={ref}\r\n      initial={{ opacity: 0, y: 60 }}\r\n      animate={controls}\r\n    >\r\n      <div className={styles.aboutContainer}>\r\n        <motion.div\r\n          className={styles.aboutImage}\r\n          whileHover={{ scale: 1.07 }}\r\n          whileTap={{ scale: 1.03 }}\r\n        >\r\n          <div className={styles.imageOverlay}></div>\r\n          <picture>\r\n            <img src={process.env.PUBLIC_URL + '/images/me.jpg'} alt=\"Balakrishna Nair\" loading=\"lazy\" width=\"320\" height=\"400\" />\r\n          </picture>\r\n        </motion.div>\r\n        <div className={styles.aboutText}>\r\n          <h1 className={styles.myHeading}>About Me</h1>\r\n          <p>\r\n            I am Balakrishna Nair Nalivalapil, a Master of Engineering student in Software Engineering at the University of Maryland, College Park, with an anticipated graduation date in May 2026. With two years of professional experience as a Senior Software Engineer at Capgemini, I specialize in middleware integration, automation pipelines, and scalable software systems.\r\n          </p>\r\n          <p>\r\n            Currently, I am deepening my expertise in React-based frontend development and Azure cloud platforms. I am passionate about building robust and user-friendly applications that solve real-world problems and continuously seek opportunities to enhance my skills in full stack development, data analytics, and IoT.\r\n          </p>\r\n          <h2 className={styles.subheading}>My Philosophy</h2>\r\n          <p>\r\n            I believe in building scalable and user-centric applications that make a meaningful impact.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </motion.section>\r\n  );\r\n};\r\n\r\nexport default About; ","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>(onChange);\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element | undefined>(undefined);\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","import { invariant } from 'motion-utils';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { animateVisualElement } from '../interfaces/visual-element.mjs';\n\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value) => value.stop());\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [...variantLabels].reverse();\n    reversedLabels.forEach((key) => {\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        if (visualElement.variantChildren) {\n            visualElement.variantChildren.forEach((child) => {\n                setVariants(child, variantLabels);\n            });\n        }\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\n/**\n * @public\n */\nfunction animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */\n    let hasMounted = false;\n    /**\n     * A collection of linked component animation controls.\n     */\n    const subscribers = new Set();\n    const controls = {\n        subscribe(visualElement) {\n            subscribers.add(visualElement);\n            return () => void subscribers.delete(visualElement);\n        },\n        start(definition, transitionOverride) {\n            invariant(hasMounted, \"controls.start() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            const animations = [];\n            subscribers.forEach((visualElement) => {\n                animations.push(animateVisualElement(visualElement, definition, {\n                    transitionOverride,\n                }));\n            });\n            return Promise.all(animations);\n        },\n        set(definition) {\n            invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach((visualElement) => {\n                setValues(visualElement, definition);\n            });\n        },\n        stop() {\n            subscribers.forEach((visualElement) => {\n                stopAnimation(visualElement);\n            });\n        },\n        mount() {\n            hasMounted = true;\n            return () => {\n                hasMounted = false;\n                controls.stop();\n            };\n        },\n    };\n    return controls;\n}\n\nexport { animationControls, setValues };\n","import { useConstant } from '../../utils/use-constant.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { animationControls } from './animation-controls.mjs';\n\n/**\n * Creates `LegacyAnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `LegacyAnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\nfunction useAnimationControls() {\n    const controls = useConstant(animationControls);\n    useIsomorphicLayoutEffect(controls.mount, []);\n    return controls;\n}\nconst useAnimation = useAnimationControls;\n\nexport { useAnimation, useAnimationControls };\n"],"names":["About","controls","useAnimation","ref","inView","useInView","triggerOnce","threshold","React","start","opacity","y","transition","duration","ease","_jsx","motion","section","id","className","styles","initial","animate","children","_jsxs","div","whileHover","scale","whileTap","src","alt","loading","width","height","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","map","concat","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","delay","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result","setVariants","visualElement","variantLabels","reverse","variant","getVariant","setTarget","variantChildren","child","animationControls","hasMounted","subscribers","Set","subscribe","add","definition","transitionOverride","invariant","animations","animateVisualElement","Promise","all","setValues","stop","values","value","stopAnimation","mount","useConstant","useIsomorphicLayoutEffect"],"sourceRoot":""}