{"version":3,"file":"static/js/285.f1fd7d2e.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Portfolio/Portfolio.module.css?4959","webpack://my-app/./src/components/Portfolio/ProjectCard.module.css?f503","components/Portfolio/ProjectCard.js","webpack://my-app/./src/components/Portfolio/ProjectModal.module.css?da4f","components/Portfolio/ProjectModal.js","components/Portfolio/Portfolio.js","../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","../node_modules/react-intersection-observer/src/useInView.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"portfolio\":\"Portfolio_portfolio__2bddH\",\"portfolioHeading\":\"Portfolio_portfolioHeading__DmyVI\",\"myHeading\":\"Portfolio_myHeading__b8QKz\",\"projectsGrid\":\"Portfolio_projectsGrid__+CtFt\"};","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"ProjectCard_card__Ld1La\",\"cardImageWrap\":\"ProjectCard_cardImageWrap__esLHL\",\"cardImage\":\"ProjectCard_cardImage__nw7Sr\",\"gradientOverlay\":\"ProjectCard_gradientOverlay__pm2rS\",\"detailsBtn\":\"ProjectCard_detailsBtn__gAwCl\",\"cardBody\":\"ProjectCard_cardBody__AiMS9\",\"cardTitle\":\"ProjectCard_cardTitle__3g4eI\",\"cardDesc\":\"ProjectCard_cardDesc__fzyMV\",\"tags\":\"ProjectCard_tags__-oX5v\",\"tag\":\"ProjectCard_tag__C54f3\"};","import React from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport styles from './ProjectCard.module.css';\r\n\r\nconst cardVariants = {\r\n  hidden: { opacity: 0, y: 40 },\r\n  visible: (i) => ({ opacity: 1, y: 0, transition: { delay: i * 0.12, duration: 0.6, ease: 'easeOut' } })\r\n};\r\n\r\nconst ProjectCard = ({ title, image, tags, shortDesc, onClick, index }) => {\r\n  return (\r\n    <motion.div\r\n      className={styles.card}\r\n      custom={index}\r\n      initial=\"hidden\"\r\n      animate=\"visible\"\r\n      variants={cardVariants}\r\n      whileHover={{\r\n        scale: 1.045,\r\n        boxShadow: '0 0 40px 0 rgba(212,175,55,0.22), 0 2px 16px rgba(0,0,0,0.13)',\r\n        borderColor: '#D4AF37',\r\n      }}\r\n      transition={{ type: 'spring', stiffness: 300, damping: 20 }}\r\n      onClick={onClick}\r\n      tabIndex={0}\r\n      role=\"button\"\r\n      aria-label={`View details for ${title}`}\r\n      onKeyDown={e => (e.key === 'Enter' || e.key === ' ') && onClick()}\r\n    >\r\n      <div className={styles.cardImageWrap}>\r\n        <picture>\r\n          <source srcSet={image.replace(/\\.(jpg|png)$/i, '.webp')} type=\"image/webp\" />\r\n          <img src={image} alt={title} className={styles.cardImage} loading=\"lazy\" width=\"320\" height=\"200\" />\r\n        </picture>\r\n        <div className={styles.gradientOverlay}></div>\r\n        <motion.button\r\n          className={styles.detailsBtn}\r\n          tabIndex={-1}\r\n          whileHover={{ scale: 1.08 }}\r\n          whileTap={{ scale: 0.98 }}\r\n        >\r\n          View Details\r\n        </motion.button>\r\n      </div>\r\n      <div className={styles.cardBody}>\r\n        <h3 className={styles.cardTitle}>{title}</h3>\r\n        <p className={styles.cardDesc}>{shortDesc}</p>\r\n        <div className={styles.tags}>\r\n          {tags.map((tag, idx) => (\r\n            <span key={idx} className={styles.tag}>{tag}</span>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ProjectCard); ","// extracted by mini-css-extract-plugin\nexport default {\"modalBackdrop\":\"ProjectModal_modalBackdrop__pirjN\",\"modal\":\"ProjectModal_modal__H1rL3\",\"closeBtn\":\"ProjectModal_closeBtn__KG+LQ\",\"leftCol\":\"ProjectModal_leftCol__+a9e4\",\"modalImage\":\"ProjectModal_modalImage__8p3iu\",\"rightCol\":\"ProjectModal_rightCol__ylOgf\",\"modalTitle\":\"ProjectModal_modalTitle__PeAFP\",\"tags\":\"ProjectModal_tags__wIWo8\",\"tagPill\":\"ProjectModal_tagPill__FLvLY\",\"section\":\"ProjectModal_section__j6nEz\",\"modalActions\":\"ProjectModal_modalActions__KwK91\",\"actionBtn\":\"ProjectModal_actionBtn__rg6fW\",\"aboutImage\":\"ProjectModal_aboutImage__1YQ-G\"};","import React from 'react';\r\nimport styles from './ProjectModal.module.css';\r\nimport { FaExternalLinkAlt, FaGithub, FaTimes } from 'react-icons/fa';\r\n\r\nconst ProjectModal = ({ project, onClose }) => {\r\n  if (!project) return null;\r\n  return (\r\n    <div className={styles.modalBackdrop} onClick={onClose}>\r\n      <div className={styles.modal} onClick={e => e.stopPropagation()}>\r\n        <button className={styles.closeBtn} onClick={onClose} aria-label=\"Close\">\r\n          <FaTimes />\r\n        </button>\r\n        <div className={styles.leftCol}>\r\n          <picture>\r\n            <source srcSet={project.image.replace(/\\.(jpg|png)$/i, '.webp')} type=\"image/webp\" />\r\n            <img src={project.image} alt={project.title} className={styles.modalImage} loading=\"lazy\" width=\"400\" height=\"320\" />\r\n          </picture>\r\n        </div>\r\n        <div className={styles.rightCol}>\r\n          <h2 className={styles.modalTitle}>{project.title}</h2>\r\n          <div className={styles.tags}>\r\n            {project.tags && project.tags.map((tag, idx) => (\r\n              <span className={styles.tagPill} key={idx}>{tag}</span>\r\n            ))}\r\n          </div>\r\n          <div className={styles.section}>\r\n            <h3>The Problem</h3>\r\n            <p>{project.problem}</p>\r\n          </div>\r\n          <div className={styles.section}>\r\n            <h3>My Solution</h3>\r\n            <p>{project.solution}</p>\r\n          </div>\r\n          <div className={styles.section}>\r\n            <h3>Impact</h3>\r\n            <p>{project.impact}</p>\r\n          </div>\r\n          <div className={styles.modalActions}>\r\n            {project.liveUrl && (\r\n              <a href={project.liveUrl} target=\"_blank\" rel=\"noopener noreferrer\" className={styles.actionBtn}>\r\n                <FaExternalLinkAlt /> Live Demo\r\n              </a>\r\n            )}\r\n            {project.githubUrl && (\r\n              <a href={project.githubUrl} target=\"_blank\" rel=\"noopener noreferrer\" className={styles.actionBtn}>\r\n                <FaGithub /> GitHub\r\n              </a>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectModal; ","import React, { useState } from 'react';\r\nimport styles from './Portfolio.module.css';\r\nimport ProjectCard from './ProjectCard';\r\nimport ProjectModal from './ProjectModal';\r\nimport { motion } from 'framer-motion';\r\nimport { useInView } from 'react-intersection-observer';\r\n\r\nconst projects = [\r\n  {\r\n    title: 'ClassNest - AI-Powered Learning Management System',\r\n    image: 'https://images.unsplash.com/photo-1513258496099-48168024aec0?auto=format&fit=crop&w=600&q=80',\r\n    tags: ['Django', 'React', 'PostgreSQL', 'AI/ML', 'Groq API'],\r\n    shortDesc: 'AI-driven LMS with automatic quiz generation from PDFs and role-based access.',\r\n    problem: 'Educators often spend significant manual effort creating engaging and relevant learning materials. The challenge was to design a system that could automate content creation and provide a scalable, multi-user learning environment.',\r\n    solution: 'I led the development of a full-featured LMS using a Django MVT backend and a React frontend. The core innovation was an AI-driven quiz generation module using the Groq API and Llama3 LLM, which automatically converts uploaded PDF documents into interactive quizzes. The system also features secure, role-based access control for administrators, educators, and students.',\r\n    impact: 'This system significantly enhances educator efficiency by automating content creation. The AI-powered features provide a more dynamic and adaptive learning experience for students, directly addressing the need for modern, intelligent educational tools.',\r\n    liveUrl: 'https://classnest.up.railway.app/',\r\n    githubUrl: 'https://github.com/bkrishnanair/classnest',\r\n  },\r\n  {\r\n    title: 'Enterprise CI/CD Automation Pipeline',\r\n    image: 'https://images.unsplash.com/photo-1461749280684-dccba630e2f6?auto=format&fit=crop&w=600&q=80',\r\n    tags: ['Python', 'Jenkins', 'CI/CD', 'DevOps', 'Agile'],\r\n    shortDesc: 'Automated CI/CD pipeline for banking integration, reducing errors and deployment time.',\r\n    problem: 'At Capgemini, the deployment process for mission-critical banking integration solutions was manual, time-consuming, and prone to human error, leading to delays and potential production issues.',\r\n    solution: 'I engineered and implemented a robust CI/CD pipeline from the ground up using Jenkins, Python scripting, and JFrog Artifactory. This pipeline automated the entire build, testing, and deployment workflow for IBM Integration Bus applications, integrating seamlessly with Jira and Bitbucket for full traceability.',\r\n    impact: 'The new automated pipeline cut deployment time by 30% and reduced post-deployment errors by 25%. This enhancement significantly increased team productivity and the reliability of systems handling over $100M in daily transactions.',\r\n    liveUrl: null,\r\n    githubUrl: null,\r\n  },\r\n  {\r\n    title: 'IoT Smart Health Monitoring System',\r\n    image: 'https://images.unsplash.com/photo-1516574187841-cb9cc2ca948b?auto=format&fit=crop&w=600&q=80',\r\n    tags: ['IoT', 'Python', 'Arduino', 'Raspberry Pi', 'Sensors'],\r\n    shortDesc: 'IoT-based system for real-time remote patient health monitoring and alerts.',\r\n    problem: \"Healthcare providers require a reliable method to monitor patients' vital signs remotely to provide timely care, especially for those with chronic conditions or in post-operative recovery.\",\r\n    solution: 'As team lead, I architected an IoT-based system that uses Arduino and Raspberry Pi to collect real-time patient data (heart rate, temperature, oxygen levels) from various sensors. I then developed a responsive web interface to display this data clearly, allowing for remote monitoring by medical professionals.',\r\n    impact: 'The system successfully demonstrated a viable solution for improving remote healthcare delivery. It ensures continuous monitoring and enables faster interventions, bridging the communication gap between patients and doctors.',\r\n    liveUrl: null,\r\n    githubUrl: 'https://github.com/bkrishnanair/iot-health-monitor',\r\n  },\r\n  {\r\n    title: 'GitHub Issues & Contributor Analysis',\r\n    image: 'https://images.unsplash.com/photo-1465101046530-73398c7f28ca?auto=format&fit=crop&w=600&q=80',\r\n    tags: ['Python', 'Pandas', 'Matplotlib', 'Data Analysis'],\r\n    shortDesc: 'Data analysis and visualization of open-source project health and contributor trends.',\r\n    problem: \"Large open-source projects like 'Poetry' struggle to understand contributor engagement trends and identify bottlenecks in issue resolution, which can slow down development and discourage new contributors.\",\r\n    solution: 'I performed a comprehensive data analysis on the Poetry project\\'s GitHub repository. Using Python, Pandas, and Matplotlib, I processed and visualized issue data to reveal patterns in contributor engagement and project responsiveness. I also developed unit tests to ensure the reliability of the data processing workflow.',\r\n    impact: 'My analysis provided actionable insights into the project\\'s health, identifying key areas for improving community management and issue triage. The visualizations made complex data easily understandable for project maintainers.',\r\n    liveUrl: null,\r\n    githubUrl: 'https://github.com/bkrishnanair/poetry-issues-analysis',\r\n  },\r\n  {\r\n    title: 'Real-Time Utility Consumption Monitor',\r\n    image: 'https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=600&q=80',\r\n    tags: ['IoT', 'Python', 'Django', 'Arduino', 'Data Visualization'],\r\n    shortDesc: 'IoT and Django web app for real-time tracking and visualization of utility usage.',\r\n    problem: 'Households often lack real-time visibility into their electricity and water usage, making it difficult to manage consumption, identify waste, and control costs effectively.',\r\n    solution: 'I designed and built a complete IoT solution, from hardware to software. Using Arduino and Raspberry Pi, I created a custom energy meter to capture real-time data. This data was then sent to a Django web application I developed, which provided users with a friendly interface to track and visualize their consumption patterns over time.',\r\n    impact: 'The web app empowered users with immediate feedback on their utility usage, enabling them to make informed decisions to conserve resources and reduce their monthly bills.',\r\n    liveUrl: null,\r\n    githubUrl: 'https://github.com/bkrishnanair/utility-monitor',\r\n  },\r\n];\r\n\r\nconst Portfolio = () => {\r\n  const [selected, setSelected] = useState(null);\r\n  const [ref, inView] = useInView({ triggerOnce: true, threshold: 0.12 });\r\n\r\n  return (\r\n    <section id=\"portfolio\" className={styles.portfolio}>\r\n      <div className={styles.portfolioHeading}>\r\n        <h1 className={styles.myHeading}>Portfolio</h1>\r\n      </div>\r\n      <motion.div\r\n        className={styles.projectsGrid}\r\n        ref={ref}\r\n        initial={{ opacity: 0, y: 60 }}\r\n        animate={inView ? { opacity: 1, y: 0 } : {}}\r\n        transition={{ duration: 0.7, ease: 'easeOut' }}\r\n      >\r\n        {projects.map((project, idx) => (\r\n          <ProjectCard\r\n            key={idx}\r\n            {...project}\r\n            onClick={() => setSelected(project)}\r\n            index={idx}\r\n          />\r\n        ))}\r\n      </motion.div>\r\n      {selected && (\r\n        <ProjectModal\r\n          project={selected}\r\n          onClose={() => setSelected(null)}\r\n        />\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Portfolio; ","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>(onChange);\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element | undefined>(undefined);\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["cardVariants","hidden","opacity","y","visible","i","transition","delay","duration","ease","ProjectCard","_ref","title","image","tags","shortDesc","onClick","index","_jsxs","motion","div","className","styles","custom","initial","animate","variants","whileHover","scale","boxShadow","borderColor","type","stiffness","damping","tabIndex","role","concat","onKeyDown","e","key","children","_jsx","srcSet","replace","src","alt","loading","width","height","button","whileTap","map","tag","idx","React","project","onClose","stopPropagation","FaTimes","problem","solution","impact","liveUrl","href","target","rel","FaExternalLinkAlt","githubUrl","FaGithub","projects","Portfolio","selected","setSelected","useState","ref","inView","useInView","triggerOnce","threshold","id","_objectSpread","ProjectModal","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}