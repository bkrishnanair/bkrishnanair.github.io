{"version":3,"file":"static/js/948.f42cd137.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Contact/Contact.module.css?03fd","components/Contact/Contact.js","../node_modules/framer-motion/dist/es/animation/hooks/animation-controls.mjs","../node_modules/framer-motion/dist/es/animation/hooks/use-animation.mjs"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"Contact_contact__4zmlP\",\"contactHeading\":\"Contact_contactHeading__MBWCN\",\"myHeading\":\"Contact_myHeading__cXjQF\",\"contactForm\":\"Contact_contactForm__TfM3+\",\"formControl\":\"Contact_formControl__vWixN\",\"formBtn\":\"Contact_formBtn__Joo0D\",\"error\":\"Contact_error__jAeQ8\",\"success\":\"Contact_success__DFxdw\"};","import React, { useState } from 'react';\nimport styles from './Contact.module.css';\nimport { useInView } from 'react-intersection-observer';\nimport { motion, useAnimation } from 'framer-motion';\n\nconst Contact = () => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    message: '',\n  });\n  const [errors, setErrors] = useState({});\n  const [submitted, setSubmitted] = useState(false);\n\n  const controls = useAnimation();\n  const [ref, inView] = useInView({ triggerOnce: true, threshold: 0.15 });\n\n  React.useEffect(() => {\n    if (inView) {\n      controls.start({ opacity: 1, y: 0, transition: { duration: 0.7, ease: 'easeOut' } });\n    }\n  }, [controls, inView]);\n\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const validate = () => {\n    let tempErrors = {};\n    if (!formData.name) tempErrors.name = 'Name is required';\n    if (!formData.email) tempErrors.email = 'Email is required';\n    if (!formData.message) tempErrors.message = 'Message is required';\n    return tempErrors;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const tempErrors = validate();\n    setErrors(tempErrors);\n    if (Object.keys(tempErrors).length === 0) {\n      setSubmitted(true);\n      setFormData({ name: '', email: '', message: '' });\n      setTimeout(() => setSubmitted(false), 3000);\n    }\n  };\n\n  return (\n    <motion.section\n      className={styles.contact}\n      id=\"contact\"\n      ref={ref}\n      initial={{ opacity: 0, y: 60 }}\n      animate={controls}\n    >\n      <div className={styles.contactHeading}>\n        <h1 className={styles.myHeading}>Contact Me</h1>\n      </div>\n      <form className={styles.contactForm} onSubmit={handleSubmit}>\n        <input\n          className={styles.formControl}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your Name\"\n          value={formData.name}\n          onChange={handleChange}\n        />\n        {errors.name && <span className={styles.error}>{errors.name}</span>}\n        <input\n          className={styles.formControl}\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your Email\"\n          value={formData.email}\n          onChange={handleChange}\n        />\n        {errors.email && <span className={styles.error}>{errors.email}</span>}\n        <textarea\n          className={styles.formControl}\n          name=\"message\"\n          placeholder=\"Write your message\"\n          rows=\"6\"\n          value={formData.message}\n          onChange={handleChange}\n        ></textarea>\n        {errors.message && <span className={styles.error}>{errors.message}</span>}\n        <button className={styles.formBtn} type=\"submit\">Send Message</button>\n        {submitted && <span className={styles.success}>Message sent successfully!</span>}\n      </form>\n    </motion.section>\n  );\n};\n\nexport default Contact; ","import { invariant } from 'motion-utils';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { animateVisualElement } from '../interfaces/visual-element.mjs';\n\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value) => value.stop());\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [...variantLabels].reverse();\n    reversedLabels.forEach((key) => {\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        if (visualElement.variantChildren) {\n            visualElement.variantChildren.forEach((child) => {\n                setVariants(child, variantLabels);\n            });\n        }\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\n/**\n * @public\n */\nfunction animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */\n    let hasMounted = false;\n    /**\n     * A collection of linked component animation controls.\n     */\n    const subscribers = new Set();\n    const controls = {\n        subscribe(visualElement) {\n            subscribers.add(visualElement);\n            return () => void subscribers.delete(visualElement);\n        },\n        start(definition, transitionOverride) {\n            invariant(hasMounted, \"controls.start() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            const animations = [];\n            subscribers.forEach((visualElement) => {\n                animations.push(animateVisualElement(visualElement, definition, {\n                    transitionOverride,\n                }));\n            });\n            return Promise.all(animations);\n        },\n        set(definition) {\n            invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach((visualElement) => {\n                setValues(visualElement, definition);\n            });\n        },\n        stop() {\n            subscribers.forEach((visualElement) => {\n                stopAnimation(visualElement);\n            });\n        },\n        mount() {\n            hasMounted = true;\n            return () => {\n                hasMounted = false;\n                controls.stop();\n            };\n        },\n    };\n    return controls;\n}\n\nexport { animationControls, setValues };\n","import { useConstant } from '../../utils/use-constant.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { animationControls } from './animation-controls.mjs';\n\n/**\n * Creates `LegacyAnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `LegacyAnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\nfunction useAnimationControls() {\n    const controls = useConstant(animationControls);\n    useIsomorphicLayoutEffect(controls.mount, []);\n    return controls;\n}\nconst useAnimation = useAnimationControls;\n\nexport { useAnimation, useAnimationControls };\n"],"names":["Contact","formData","setFormData","useState","name","email","message","errors","setErrors","submitted","setSubmitted","controls","useAnimation","ref","inView","useInView","triggerOnce","threshold","React","start","opacity","y","transition","duration","ease","handleChange","e","_objectSpread","target","value","_jsxs","motion","section","className","styles","id","initial","animate","children","_jsx","onSubmit","preventDefault","tempErrors","validate","Object","keys","length","setTimeout","type","placeholder","onChange","rows","setVariants","visualElement","variantLabels","reverse","forEach","key","variant","getVariant","setTarget","variantChildren","child","animationControls","hasMounted","subscribers","Set","subscribe","add","delete","definition","transitionOverride","invariant","animations","push","animateVisualElement","Promise","all","set","Array","isArray","setValues","stop","values","stopAnimation","mount","useConstant","useIsomorphicLayoutEffect"],"sourceRoot":""}